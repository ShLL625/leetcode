class BinarySearch:
    # Search Insert Position
    def searchInsert(self, nums: List[int], target: int) -> int:
        start = 0
        end = len(nums) - 1
        
        while start <= end:
            i = (start + end) >> 1
            if nums[i] == target:
                return i 
            if nums[i] < target:
                start = i + 1
            else:
                end = i - 1
        return start
    
    # Search a 2D Matrix
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        for i in range(len(matrix)):
            if matrix[i][-1] >= target:
                for j in range(len(matrix[i])):
                    if matrix[i][j] == target:
                        return True
                return False
        return False
    
    # Find Peak Element
    def findPeakElement(self, nums: List[int]) -> int:
        start = 1
        end = len(nums) - 2
        
        while start <= end:
            i = (start + end) >> 1
            if nums[i] == target:
                return i 
            if nums[i] < target:
                start = i + 1
            else:
                end = i - 1
        return start
    
    # Search in Rotated Sorted Array
    def searchRotated(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1

        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                return mid
            elif nums[mid] >= nums[left]:
                if nums[left] <= target <= nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] <= target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        
        return -1
    
    # Find First and Last Position of Element in Sorted Array
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if not nums:
            return [-1,-1]
        res = []
        found = False

        # binary search for lower bound
        l, r = 0, len(nums) - 1
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] < target:
                l = mid + 1
            else:
                if nums[mid] == target:
                    found = True
                r = mid - 1
        res.append(l)

        # binary search for the upper bound
        l, r = 0, len(nums) - 1
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] > target:
                r = mid - 1
            else:
                if nums[mid] == target:
                    found = True
                l = mid + 1
        res.append(r)

        # handle not found case and return
        return res if found else [-1, -1]
    
    # Find Minimum in Rotated Sorted Array
    def findMin(self, nums: List[int]) -> int:
        l = 0
        r = len(nums) - 1
        while l < r:
            m = (l + r) >> 1
            if nums[l] <= nums[m] <= nums[r]:
                return nums[l]
            else:
                if nums[m] <= nums[r]:
                    r = m 
                else:
                    l = m + 1
        return nums[l]
    
    # Median of Two Sorted Arrays
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2):
            return self.findMedianSortedArrays(nums2, nums1)
        
        m, n = len(nums1), len(nums2)
        left, right = 0, m
        halfLen = (m + n + 1) // 2
        
        while left <= right:
            i = (left + right) // 2
            j = halfLen - i
            
            if i < right and nums1[i] < nums2[j - 1]:
                left = i + 1
            elif i > left and nums1[i - 1] > nums2[j]:
                right = i - 1
            else:
                maxLeft = 0
                if i == 0:
                    maxLeft = nums2[j - 1]
                elif j == 0:
                    maxLeft = nums1[i - 1]
                else:
                    maxLeft = max(nums1[i - 1], nums2[j - 1])
                
                if (m + n) % 2 == 1:
                    return maxLeft
                
                minRight = 0
                if i == m:
                    minRight = nums2[j]
                elif j == n:
                    minRight = nums1[i]
                else:
                    minRight = min(nums1[i], nums2[j])
                
                return (maxLeft + minRight) / 2.0
        
        return 0.0