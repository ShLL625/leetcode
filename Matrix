import List

class Matrix:
    # Valid Sudoku
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        res = []
        for i in range(9):
            for j in range(9):
                element = board[i][j]
                if element != '.':
                    res += [(i, element), (element, j), (i // 3, j // 3, element)]
        return len(res) == len(set(res))
    
    # Spiral Matrix
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        n = len(matrix) * len(matrix[0])
        answer = []
        top = 0
        left = 0
        bot = len(matrix) - 1
        right = len(matrix[0]) - 1
        while 1:
            for i in range(left, right + 1):
                answer.append(matrix[top][i])
                n -= 1
            if n == 0:
                return answer
            top += 1
            for i in range(top, bot + 1):
                answer.append(matrix[i][right])
                n -= 1
            if n == 0:
                return answer
            right -= 1
            for i in range(right , left - 1, -1):
                answer.append(matrix[bot][i])
                n -= 1
            if n == 0:
                return answer
            bot -= 1
            for i in range(bot , top -1, -1):
                answer.append(matrix[i][left])
                n -= 1
            if n == 0:
                return answer
            left += 1

    # Rotate Image
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        n = len(matrix)
        for i in range(n // 2):
            buffer = matrix[i][i : n - i]
            for j in range(n - i - 1, i - 1, -1):
                matrix[i][j] = matrix[n - j - 1][i]
            for j in range(i, n - i):
                matrix[j][i] = matrix[n - i - 1][j]
            for j in range(i, n - i):
                matrix[n - i - 1][j] = matrix[n - j - 1][n - i - 1]
            for j in range(i, n - i):
                matrix[j][n - i - 1] = buffer[j - i]

    # Set Matrix Zeroes
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        row = []
        col = []
        for i, v1 in enumerate(matrix):
            for j, v2 in enumerate(v1):
                if v2 == 0: 
                    row.append(i)
                    col.append(j)
        row = set(row)
        col = set(col)
        for i in row:
            for j in range(len(matrix[0])):
                matrix[i][j] = 0
        for i in col:
            for j in range(len(matrix)):
                matrix[j][i] = 0

    # Game of Life
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        buffer = []
        row = len(board)
        col = len(board[0])
        for i in range(row):
            for j in range(col):
                neighbors= 0
                buffer.append([])
                for l in range(i - 1, i + 2):
                    for m in range(j - 1, j + 2):
                        if l >= 0 and l < row and m >= 0 and m < col:
                            neighbors += board[l][m]
                buffer[i].append(neighbors)
        for i in range(row):
            for j in range(col):
                if board[i][j] and buffer[i][j] < 3 or buffer[i][j] > 4:
                    board[i][j] = 0
                elif not board[i][j] and buffer[i][j] == 3:
                    board[i][j] = 1