import string, List

class TwoPointers:
    # Valid Palindrome
    def isPalindrome(self, s: str) -> bool:
        s = s.replace(" ", "").lower()
        for i in string.punctuation:
            s = s.replace(i, "")
        if len(s) < 2:
            return True
        else:
            if s[:len(s)//2] == s[::-1][:len(s)//2]:
                return True
            else:
                return False    
            
    # Is Subsequence
    def isSubsequence(self, s: str, t: str) -> bool:
        n = 0
        if s == "":
            return True
        for i in t:
            if i == s[n]:
                n += 1
            if n == len(s):
                return True
        return False 
    
    # Two Sum II - Input Array Is Sorted
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left = 0
        right = len(numbers)-1
        currentTarget = numbers[left] + numbers[right]
        while currentTarget != target:
            if currentTarget < target:
                left += 1
            elif currentTarget > target:
                right -= 1
            currentTarget = numbers[left] + numbers[right]
        return [left+1, right+1]
    
    # Container With Most Water
    def maxArea(self, height: List[int]) -> int:
        max_area = 0
        left = 0
        right = len(height) - 1
        while left < right:
            max_area = max(max_area, (right - left) * min(height[left], height[right]))

            if height[left] < height[right]:
                left += 1
            else:
                right -= 1       
        return max_area
    
    # 3Sum
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        answer = set()
        n = []
        p = []
        z = []
        for i in nums:
            if i < 0:
                n.append(i)
            elif i > 0:
                p.append(i)
            else:
                z.append(i)
        N = set(n)
        P = set(p)
        if len(z) > 2:
            answer.add((0, 0, 0))
        if len(z) > 0:
            for i in N:
                if -i in P:
                    answer.add((i, 0, -i))
        for i, v in enumerate(n):
            for j in n[i+1:]:
                if -(v + j) in P:
                    answer.add(tuple(sorted([v, j , -(v + j)])))
        for i, v in enumerate(p):
            for j in p[i+1:]:
                if -(v + j) in N:
                    answer.add(tuple(sorted([v, j , -(v + j)])))
        return list(answer)